diff --git a/config.def.h b/config.def.h
index 72f14bb..f12fde3 100644
--- a/config.def.h
+++ b/config.def.h
@@ -1,50 +1,80 @@
 /* See LICENSE file for copyright and license details. */
 
 /* appearance */
-static const unsigned int borderpx  = 1;        /* border pixel of windows */
-static const unsigned int snap      = 32;       /* snap pixel */
-static const int showbar            = 1;        /* 0 means no bar */
-static const int topbar             = 1;        /* 0 means bottom bar */
-static const char *fonts[]          = { "monospace:size=10" };
+static const unsigned int borderpx  = 3;         /* border pixel of windows */
+static const int gappx              = 40;        /* gaps between windows */
+static const unsigned int snap      = 0;         /* snap pixel */
+static const int showbar            = 1;         /* 0 means no bar */
+static const int topbar             = 1;         /* 0 means bottom bar */
+static const char *fonts[]          = { "monospace:size=10", "JoyPixels:pixelsize=10:antialias=true:autohint=true" };
 static const char dmenufont[]       = "monospace:size=10";
-static const char col_gray1[]       = "#222222";
-static const char col_gray2[]       = "#444444";
-static const char col_gray3[]       = "#bbbbbb";
-static const char col_gray4[]       = "#eeeeee";
-static const char col_cyan[]        = "#005577";
+static const char normbgcolor[]     = "#1d2021"; /* main bar color */
+static const char normbordercolor[] = "#1d2021"; /* border color unfocused windows */
+static const char normfgcolor[]     = "#ebdbb2"; /* tag unselected and main foreground */
+static const char selfgcolor[]      = "#d79921"; /* tag selected and title foreground */
+static const char selbordercolor[]  = "#cc241d"; /* border color focused windows and tags */
+static char selbgcolor[]            = "#1d2021"; /* tag selected and title background */
 static const char *colors[][3]      = {
-  /*               fg         bg         border   */
-  [SchemeNorm] = { col_gray3, col_gray1, col_gray2 },
-  [SchemeSel]  = { col_gray4, col_cyan,  col_cyan  },
+  /*               fg           bg           border   */
+  [SchemeNorm] = { normfgcolor, normbgcolor, normbordercolor },
+  [SchemeSel]  = { selfgcolor,  selbgcolor,  selbordercolor  },
 };
 
 /* tagging */
-static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" };
+/* static const char *tags[] = { "1", "2", "3", "4", "5", "6", "7", "8", "9" }; */
+static const char *tags[] = { "1:home", "2:web", "3:chat", "4:games", "5:dev" };
 
 static const Rule rules[] = {
   /* xprop(1):
    *  WM_CLASS(STRING) = instance, class
    *  WM_NAME(STRING) = title
    */
-  /* class      instance    title       tags mask     isfloating   monitor */
-  { "Gimp",     NULL,       NULL,       0,            1,           -1 },
-  { "Firefox",  NULL,       NULL,       1 << 8,       0,           -1 },
+  /* class            instance    title                      tags mask     iscentered   isfloating   monitor */
+  { "Gimp",           NULL,       NULL,                      1 << 4,       0,           0,           -1 },
+  { "firefox",        NULL,       NULL,                      1 << 1,       0,           0,           -1 },
+  { "Gcr-prompter",   NULL,       NULL,                      0,            1,           1,           -1 },
+  { "mpv",            NULL,       NULL,                      0,            1,           1,           -1 },
+  { "Steam",          NULL,       "Steam",                   1 << 2,       1,           1,           -1 },
+  { "dota2",          NULL,       NULL,                      1 << 3,       0,           0,           -1 },
+  { "RimWorldLinux",  NULL,       NULL,                      1 << 3,       0,           0,           -1 },
+  { "Zenity",         NULL,       NULL,                      1 << 2,       1,           1,           -1 },
+  { "steam_proton",   NULL,       NULL,                      1 << 3,       1,           1,           -1 },
+  { NULL,             NULL,       "Friends List",            1 << 2,       1,           1,           -1 },
+  { NULL,             NULL,       "Wine System Tray",        1 << 4,       0,           1,           -1 },
+  { NULL,             NULL,       "Rockstar Games Launcher", 1 << 3,       1,           1,           -1 },
+  { NULL,             NULL,       "Grand Theft Auto V",      1 << 3,       0,           0,           -1 },
+  { NULL,             NULL,       "tremc",                   1 << 4,       0,           0,           -1 },
+  { NULL,             NULL,       "pulsemixer",              0,            1,           1,           -1 },
 };
 
 /* layout(s) */
-static const float mfact     = 0.55; /* factor of master area size [0.05..0.95] */
+static const float mfact     = 0.50; /* factor of master area size [0.05..0.95] */
 static const int nmaster     = 1;    /* number of clients in master area */
-static const int resizehints = 1;    /* 1 means respect size hints in tiled resizals */
+static const int resizehints = 0;    /* 1 means respect size hints in tiled resizals */
 
+#include "fibonacci.c"
+#include "gaplessgrid.c"
 static const Layout layouts[] = {
   /* symbol     arrange function */
-  { "[]=",      tile },    /* first entry is default */
+  { "[]=",      tile },          /* first entry is default */
+
+  { "TTT",      bstack },        /* master on top, slaves on bottom */
+  { "===",      bstackhoriz },   /* master on top, slaves on bottom */
+
+  { "[@]",      spiral },        /* fibonacci spiral */
+  { "[\\]",     dwindle },       /* decreasing in size right and leftward */
+
+  { "###",    gaplessgrid },     /* grid */
+
+  { "[D]",      deck },          /* master on left, slaves in monocle-like mode on right */
+  { "[M]",      monocle },       /* all windows on top of eachother */
+
   { "><>",      NULL },    /* no layout function means floating behavior */
-  { "[M]",      monocle },
 };
 
 /* key definitions */
-#define MODKEY Mod1Mask
+#define MODKEY Mod4Mask
+#define ALTKEY Mod1Mask
 #define TAGKEYS(KEY,TAG) \
   { MODKEY,                       KEY,      view,           {.ui = 1 << TAG} }, \
   { MODKEY|ControlMask,           KEY,      toggleview,     {.ui = 1 << TAG} }, \
@@ -56,44 +86,99 @@ static const Layout layouts[] = {
 
 /* commands */
 static char dmenumon[2] = "0"; /* component of dmenucmd, manipulated in spawn() */
-static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL };
+/* static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", col_gray1, "-nf", col_gray3, "-sb", col_cyan, "-sf", col_gray4, NULL }; */
+static const char *dmenucmd[] = { "dmenu_run", "-m", dmenumon, "-fn", dmenufont, "-nb", normbgcolor, "-nf", normfgcolor, "-sb", selbgcolor, "-sf", selfgcolor, NULL };
 static const char *termcmd[]  = { "st", NULL };
 
+#include <X11/XF86keysym.h>
 static Key keys[] = {
   /* modifier                     key        function        argument */
-  { MODKEY,                       XK_p,      spawn,          {.v = dmenucmd } },
-  { MODKEY|ShiftMask,             XK_Return, spawn,          {.v = termcmd } },
-  { MODKEY,                       XK_b,      togglebar,      {0} },
+  { MODKEY,                       XK_d,      spawn,          {.v = dmenucmd } },
+  { MODKEY,                       XK_Return, spawn,          {.v = termcmd } },
+  { MODKEY|ShiftMask,             XK_t,      togglebar,      {0} },
   { MODKEY,                       XK_j,      focusstack,     {.i = +1 } },
   { MODKEY,                       XK_k,      focusstack,     {.i = -1 } },
-  { MODKEY,                       XK_i,      incnmaster,     {.i = +1 } },
-  { MODKEY,                       XK_d,      incnmaster,     {.i = -1 } },
+  { ALTKEY,                       XK_comma,  incnmaster,     {.i = +1 } },
+  { ALTKEY,                       XK_period, incnmaster,     {.i = -1 } },
   { MODKEY,                       XK_h,      setmfact,       {.f = -0.05} },
   { MODKEY,                       XK_l,      setmfact,       {.f = +0.05} },
-  { MODKEY,                       XK_Return, zoom,           {0} },
+  { MODKEY|ShiftMask,             XK_j,      zoom,           {0} },
   { MODKEY,                       XK_Tab,    view,           {0} },
-  { MODKEY|ShiftMask,             XK_c,      killclient,     {0} },
-  { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} },
-  { MODKEY,                       XK_f,      setlayout,      {.v = &layouts[1]} },
-  { MODKEY,                       XK_m,      setlayout,      {.v = &layouts[2]} },
+  { MODKEY,                       XK_q,      killclient,     {0} },
+  { MODKEY,                       XK_t,      setlayout,      {.v = &layouts[0]} }, /* tile */
+  { MODKEY,                       XK_y,      setlayout,      {.v = &layouts[1]} }, /* bstack */
+  { MODKEY|ShiftMask,             XK_y,      setlayout,      {.v = &layouts[2]} }, /* bstack horizontal */
+  { MODKEY,                       XK_u,      setlayout,      {.v = &layouts[3]} }, /* spiral */
+  { MODKEY|ShiftMask,             XK_u,      setlayout,      {.v = &layouts[4]} }, /* dwindle */
+  { MODKEY,                       XK_i,      setlayout,      {.v = &layouts[5]} }, /* grid */
+  { MODKEY,                       XK_o,      setlayout,      {.v = &layouts[6]} }, /* deck */
+  { MODKEY|ShiftMask,             XK_o,      setlayout,      {.v = &layouts[7]} }, /* monocle */
   { MODKEY,                       XK_space,  setlayout,      {0} },
-  { MODKEY|ShiftMask,             XK_space,  togglefloating, {0} },
+  { MODKEY|ShiftMask,             XK_t,      togglefloating, {0} },
+  { MODKEY,                       XK_f,      togglefullscr,  {0} },
   { MODKEY,                       XK_0,      view,           {.ui = ~0 } },
   { MODKEY|ShiftMask,             XK_0,      tag,            {.ui = ~0 } },
-  { MODKEY,                       XK_comma,  focusmon,       {.i = -1 } },
-  { MODKEY,                       XK_period, focusmon,       {.i = +1 } },
-  { MODKEY|ShiftMask,             XK_comma,  tagmon,         {.i = -1 } },
-  { MODKEY|ShiftMask,             XK_period, tagmon,         {.i = +1 } },
+  { MODKEY,                       XK_Left,   focusmon,       {.i = -1 } },
+  { MODKEY,                       XK_Right,  focusmon,       {.i = +1 } },
+  { MODKEY|ShiftMask,             XK_Left,   tagmon,         {.i = -1 } },
+  { MODKEY|ShiftMask,             XK_Right,  tagmon,         {.i = +1 } },
+  { ALTKEY,                       XK_minus,  setgaps,        {.i = -5 } },
+  { ALTKEY,                       XK_equal,  setgaps,        {.i = +5 } },
+  { ALTKEY|ShiftMask,             XK_equal,  setgaps,        {.i = 0  } },
   TAGKEYS(                        XK_1,                      0)
   TAGKEYS(                        XK_2,                      1)
   TAGKEYS(                        XK_3,                      2)
   TAGKEYS(                        XK_4,                      3)
   TAGKEYS(                        XK_5,                      4)
-  TAGKEYS(                        XK_6,                      5)
-  TAGKEYS(                        XK_7,                      6)
-  TAGKEYS(                        XK_8,                      7)
-  TAGKEYS(                        XK_9,                      8)
-  { MODKEY|ShiftMask,             XK_q,      quit,           {0} },
+/*  TAGKEYS(                        XK_6,                      5) */
+/*  TAGKEYS(                        XK_7,                      6) */
+/*  TAGKEYS(                        XK_8,                      7) */
+/*  TAGKEYS(                        XK_9,                      8) */
+  { MODKEY|ShiftMask,             XK_r,      quit,           {0} },
+  { MODKEY,                       XK_x,      spawn,          SHCMD("dmenuprompt \"Shutdown?\" \"sudo -A systemctl poweroff\"") },
+  { MODKEY,                       XK_r,      spawn,          SHCMD("dmenuprompt \"Reboot?\" \"sudo -A systemctl reboot\"") },
+  { MODKEY,                       XK_Escape, spawn,          SHCMD("dmenuprompt \"Kill Xorg?\" \"killall Xorg\"") },
+  { MODKEY,                       XK_Delete, spawn,          SHCMD("dmenurecord kill") },
+  { ALTKEY,                       XK_Delete, spawn,          SHCMD("camtoggle kill") },
+  { MODKEY,                       XK_F5,     spawn,          SHCMD("dmenurecord") },
+  { MODKEY,                       XK_F6,     spawn,          SHCMD("camtoggle") },
+  { MODKEY,                       XK_F7,     spawn,          SHCMD("dmenuunclutter") },
+  { MODKEY,                       XK_F8,     spawn,          SHCMD("st -e pulsemixer; kill -44 $(pidof dwmblocks)") },
+  { MODKEY,                       XK_F9,     spawn,          SHCMD("dmenumount") },
+  { MODKEY,                       XK_F10,    spawn,          SHCMD("dmenuumount") },
+  { MODKEY,                       XK_F11,    spawn,          SHCMD("mpv --no-cache --no-osc --no-input-default-bindings --input-conf=/dev/null --title=webcam $(ls /dev/video[0,2,4,6,8] | tail -n 1)") },
+  { MODKEY,                       XK_F12,    spawn,          SHCMD("st -e tremc") },
+  { MODKEY,                       XK_Insert, spawn,          SHCMD("showclip") },
+  { MODKEY,                       XK_grave,  spawn,          SHCMD("dmenuunicode") },
+  { MODKEY,                       XK_b,      spawn,          SHCMD("$BROWSER") },
+  { MODKEY,                       XK_g,      spawn,          SHCMD("st -e htop") },
+  { MODKEY,                       XK_e,      spawn,          SHCMD("st -e vifmrun") },
+  { MODKEY,                       XK_n,      spawn,          SHCMD("st -e newsboat; pkill -RTMIN+6 dwmblocks") },
+  { MODKEY,                       XK_c,      spawn,          SHCMD("st -e calcurse") },
+  { MODKEY|ShiftMask,             XK_c,      spawn,          SHCMD("crontog") },
+  { MODKEY|ShiftMask,             XK_m,      spawn,          SHCMD("st -e neomutt; pkill -RTMIN+12 dwmblocks") },
+  { MODKEY|ShiftMask,             XK_b,      spawn,          SHCMD("st -e bc -ql") },
+  { MODKEY,                       XK_p,      spawn,          SHCMD("mpc toggle") },
+  { MODKEY|ShiftMask,             XK_p,      spawn,          SHCMD("mpc pause ; pauseallmpv") },
+  { MODKEY,                       XK_m,      spawn,          SHCMD("st -e ncmpcpp") },
+  { MODKEY,                       XK_equal,  spawn,          SHCMD("pamixer --allow-boost -i 3; voldunstlevel") },
+  { MODKEY,                       XK_minus,  spawn,          SHCMD("pamixer --allow-boost -d 3; voldunstlevel") },
+  { MODKEY,                       XK_comma,  spawn,          SHCMD("mpc prev") },
+  { MODKEY,                       XK_period, spawn,          SHCMD("mpc next") },
+  { MODKEY|ShiftMask,             XK_comma,  spawn,          SHCMD("mpc seek -10") },
+  { MODKEY|ShiftMask,             XK_period, spawn,          SHCMD("mpc seek +10") },
+  { MODKEY,                       XK_Print,  spawn,          SHCMD("maimpick") },
+  { MODKEY|ShiftMask,             XK_Print,  spawn,          SHCMD("pixshot") },
+  { MODKEY|ShiftMask,             XK_z,      spawn,          SHCMD("dmenumanterm") },
+  { MODKEY,                       XK_z,      spawn,          SHCMD("dmenumanzathura") },
+  { MODKEY|ShiftMask,             XK_n,      spawn,          SHCMD("dmenunote") },
+  { MODKEY|ShiftMask,             XK_slash,  spawn,          SHCMD("dmenubind") },
+  { MODKEY,                       XK_s,      spawn,          SHCMD("dmenuplaylist") },
+  { MODKEY,                       XK_w,      spawn,          SHCMD("dmenuweb") },
+
+  { 0,                            XK_Print,  spawn,          SHCMD("maim pic-full-$(date '+%y%m%d-%H%M-%S').png") },
+  { 0,   XF86XK_AudioRaiseVolume,            spawn,          SHCMD("pamixer --allow-boost -i 3; voldunstlevel") },
+  { 0,   XF86XK_AudioLowerVolume,            spawn,          SHCMD("pamixer --allow-boost -d 3; voldunstlevel") },
 };
 
 /* button definitions */
@@ -103,7 +188,12 @@ static Button buttons[] = {
   { ClkLtSymbol,          0,              Button1,        setlayout,      {0} },
   { ClkLtSymbol,          0,              Button3,        setlayout,      {.v = &layouts[2]} },
   { ClkWinTitle,          0,              Button2,        zoom,           {0} },
-  { ClkStatusText,        0,              Button2,        spawn,          {.v = termcmd } },
+  { ClkStatusText,        0,              Button1,        sigdwmblocks,   {.i = 1} },
+  { ClkStatusText,        0,              Button2,        sigdwmblocks,   {.i = 2} },
+  { ClkStatusText,        0,              Button3,        sigdwmblocks,   {.i = 3} },
+  { ClkStatusText,        0,              Button4,        sigdwmblocks,   {.i = 4} },
+  { ClkStatusText,        0,              Button5,        sigdwmblocks,   {.i = 5} },
+  { ClkStatusText,        ShiftMask,      Button1,        sigdwmblocks,   {.i = 6} },
   { ClkClientWin,         MODKEY,         Button1,        movemouse,      {0} },
   { ClkClientWin,         MODKEY,         Button2,        togglefloating, {0} },
   { ClkClientWin,         MODKEY,         Button3,        resizemouse,    {0} },
